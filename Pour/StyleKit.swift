//
//  StyleKit.swift
//  Pour
//
//  Created by Lennart Wisbar on 10.12.19.
//  Copyright Â© 2019 Lennart Wisbar. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundWhite: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let borderGray: UIColor = UIColor(red: 0.502, green: 0.502, blue: 0.518, alpha: 1.000)
        static let recRed: UIColor = UIColor(red: 0.816, green: 0.008, blue: 0.107, alpha: 1.000)
        static let evernoteGreen: UIColor = UIColor(red: 0.455, green: 0.733, blue: 0.267, alpha: 1.000)
        static var imageOfRecButton: UIImage?
        static var recButtonTargets: [AnyObject]?
        static var imageOfSettingsButton: UIImage?
        static var settingsButtonTargets: [AnyObject]?
        static var imageOfStopButton: UIImage?
        static var stopButtonTargets: [AnyObject]?
        static var imageOfDeleteButton: UIImage?
        static var deleteButtonTargets: [AnyObject]?
        static var imageOfEvernoteButton: UIImage?
        static var evernoteButtonTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var backgroundWhite: UIColor { return Cache.backgroundWhite }
    @objc dynamic public class var borderGray: UIColor { return Cache.borderGray }
    @objc dynamic public class var recRed: UIColor { return Cache.recRed }
    @objc dynamic public class var evernoteGreen: UIColor { return Cache.evernoteGreen }

    //// Drawing Methods

    @objc dynamic public class func drawRecButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)


        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Oval 3 Drawing
        let oval3Path = UIBezierPath(ovalIn: CGRect(x: 61, y: 61, width: 100, height: 100))
        StyleKit.recRed.setFill()
        oval3Path.fill()


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 222, height: 222))
        StyleKit.backgroundWhite.setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSettingsButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 111, y: 222))
        bezierPath.addCurve(to: CGPoint(x: 222, y: 111), controlPoint1: CGPoint(x: 172.3, y: 222), controlPoint2: CGPoint(x: 222, y: 172.3))
        bezierPath.addCurve(to: CGPoint(x: 111, y: 0), controlPoint1: CGPoint(x: 222, y: 49.7), controlPoint2: CGPoint(x: 172.3, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 111), controlPoint1: CGPoint(x: 49.7, y: 0), controlPoint2: CGPoint(x: 0, y: 49.7))
        bezierPath.addCurve(to: CGPoint(x: 111, y: 222), controlPoint1: CGPoint(x: 0, y: 172.3), controlPoint2: CGPoint(x: 49.7, y: 222))
        bezierPath.close()
        StyleKit.backgroundWhite.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 111, y: 73.5))
        bezier2Path.addCurve(to: CGPoint(x: 148.5, y: 111), controlPoint1: CGPoint(x: 131.71, y: 73.5), controlPoint2: CGPoint(x: 148.5, y: 90.29))
        bezier2Path.addCurve(to: CGPoint(x: 111, y: 148.5), controlPoint1: CGPoint(x: 148.5, y: 131.71), controlPoint2: CGPoint(x: 131.71, y: 148.5))
        bezier2Path.addCurve(to: CGPoint(x: 73.5, y: 111), controlPoint1: CGPoint(x: 90.29, y: 148.5), controlPoint2: CGPoint(x: 73.5, y: 131.71))
        bezier2Path.addCurve(to: CGPoint(x: 111, y: 73.5), controlPoint1: CGPoint(x: 73.5, y: 90.29), controlPoint2: CGPoint(x: 90.29, y: 73.5))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 111, y: 94.33))
        bezier2Path.addCurve(to: CGPoint(x: 94.33, y: 111), controlPoint1: CGPoint(x: 101.8, y: 94.33), controlPoint2: CGPoint(x: 94.33, y: 101.8))
        bezier2Path.addCurve(to: CGPoint(x: 111, y: 127.67), controlPoint1: CGPoint(x: 94.33, y: 120.2), controlPoint2: CGPoint(x: 101.8, y: 127.67))
        bezier2Path.addCurve(to: CGPoint(x: 127.67, y: 111), controlPoint1: CGPoint(x: 120.2, y: 127.67), controlPoint2: CGPoint(x: 127.67, y: 120.2))
        bezier2Path.addCurve(to: CGPoint(x: 111, y: 94.33), controlPoint1: CGPoint(x: 127.67, y: 101.8), controlPoint2: CGPoint(x: 120.2, y: 94.33))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        StyleKit.borderGray.setFill()
        bezier2Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(ovalIn: CGRect(x: 61, y: 61, width: 100, height: 100))
        clip2Path.addClip()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath(rect: CGRect(x: 61, y: 61, width: 100, height: 100))
        clipPath.addClip()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 134.57, y: 87.39))
        bezier3Path.addCurve(to: CGPoint(x: 161, y: 86.08), controlPoint1: CGPoint(x: 134.57, y: 87.43), controlPoint2: CGPoint(x: 149.82, y: 86.65))
        bezier3Path.addCurve(to: CGPoint(x: 161, y: 95.95), controlPoint1: CGPoint(x: 161, y: 89.22), controlPoint2: CGPoint(x: 161, y: 92.53))
        bezier3Path.addCurve(to: CGPoint(x: 144.33, y: 111), controlPoint1: CGPoint(x: 153.2, y: 103), controlPoint2: CGPoint(x: 144.33, y: 111))
        bezier3Path.addCurve(to: CGPoint(x: 161, y: 126.05), controlPoint1: CGPoint(x: 144.33, y: 111), controlPoint2: CGPoint(x: 153.2, y: 119))
        bezier3Path.addCurve(to: CGPoint(x: 161, y: 135.92), controlPoint1: CGPoint(x: 161, y: 129.47), controlPoint2: CGPoint(x: 161, y: 132.78))
        bezier3Path.addCurve(to: CGPoint(x: 134.57, y: 134.57), controlPoint1: CGPoint(x: 149.82, y: 135.35), controlPoint2: CGPoint(x: 134.57, y: 134.57))
        bezier3Path.addCurve(to: CGPoint(x: 135.92, y: 161), controlPoint1: CGPoint(x: 134.57, y: 134.57), controlPoint2: CGPoint(x: 135.35, y: 149.82))
        bezier3Path.addLine(to: CGPoint(x: 126.05, y: 161))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 144.33), controlPoint1: CGPoint(x: 119, y: 153.2), controlPoint2: CGPoint(x: 111, y: 144.33))
        bezier3Path.addCurve(to: CGPoint(x: 95.95, y: 161), controlPoint1: CGPoint(x: 111, y: 144.33), controlPoint2: CGPoint(x: 103, y: 153.2))
        bezier3Path.addLine(to: CGPoint(x: 86.08, y: 161))
        bezier3Path.addCurve(to: CGPoint(x: 86.46, y: 153.62), controlPoint1: CGPoint(x: 86.2, y: 158.66), controlPoint2: CGPoint(x: 86.33, y: 156.14))
        bezier3Path.addCurve(to: CGPoint(x: 87.43, y: 134.57), controlPoint1: CGPoint(x: 86.94, y: 144.1), controlPoint2: CGPoint(x: 87.43, y: 134.57))
        bezier3Path.addCurve(to: CGPoint(x: 61, y: 135.92), controlPoint1: CGPoint(x: 87.43, y: 134.57), controlPoint2: CGPoint(x: 72.18, y: 135.35))
        bezier3Path.addCurve(to: CGPoint(x: 61, y: 126.05), controlPoint1: CGPoint(x: 61, y: 132.78), controlPoint2: CGPoint(x: 61, y: 129.47))
        bezier3Path.addCurve(to: CGPoint(x: 77.67, y: 111), controlPoint1: CGPoint(x: 68.8, y: 119), controlPoint2: CGPoint(x: 77.67, y: 111))
        bezier3Path.addCurve(to: CGPoint(x: 61, y: 95.95), controlPoint1: CGPoint(x: 77.67, y: 111), controlPoint2: CGPoint(x: 68.8, y: 103))
        bezier3Path.addCurve(to: CGPoint(x: 61, y: 86.08), controlPoint1: CGPoint(x: 61, y: 92.53), controlPoint2: CGPoint(x: 61, y: 89.22))
        bezier3Path.addCurve(to: CGPoint(x: 87.43, y: 87.43), controlPoint1: CGPoint(x: 72.18, y: 86.65), controlPoint2: CGPoint(x: 87.43, y: 87.43))
        bezier3Path.addCurve(to: CGPoint(x: 86.08, y: 61), controlPoint1: CGPoint(x: 87.43, y: 87.43), controlPoint2: CGPoint(x: 86.65, y: 72.18))
        bezier3Path.addLine(to: CGPoint(x: 95.95, y: 61))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 77.67), controlPoint1: CGPoint(x: 103, y: 68.8), controlPoint2: CGPoint(x: 111, y: 77.67))
        bezier3Path.addCurve(to: CGPoint(x: 126.05, y: 61), controlPoint1: CGPoint(x: 111, y: 77.67), controlPoint2: CGPoint(x: 119, y: 68.8))
        bezier3Path.addLine(to: CGPoint(x: 135.92, y: 61))
        bezier3Path.addCurve(to: CGPoint(x: 134.57, y: 87.43), controlPoint1: CGPoint(x: 135.35, y: 72.18), controlPoint2: CGPoint(x: 134.57, y: 87.43))
        bezier3Path.addLine(to: CGPoint(x: 134.57, y: 87.39))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 111, y: 94.33))
        bezier3Path.addCurve(to: CGPoint(x: 94.33, y: 111), controlPoint1: CGPoint(x: 101.8, y: 94.33), controlPoint2: CGPoint(x: 94.33, y: 101.8))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 127.67), controlPoint1: CGPoint(x: 94.33, y: 120.2), controlPoint2: CGPoint(x: 101.8, y: 127.67))
        bezier3Path.addCurve(to: CGPoint(x: 127.67, y: 111), controlPoint1: CGPoint(x: 120.2, y: 127.67), controlPoint2: CGPoint(x: 127.67, y: 120.2))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 94.33), controlPoint1: CGPoint(x: 127.67, y: 101.8), controlPoint2: CGPoint(x: 120.2, y: 94.33))
        bezier3Path.close()
        StyleKit.borderGray.setFill()
        bezier3Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPauseButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit, activated: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)



        //// Variable Declarations
        let iconColor = activated ? StyleKit.borderGray : StyleKit.recRed

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 61, y: 77.5))
        bezierPath.addCurve(to: CGPoint(x: 77.5, y: 61), controlPoint1: CGPoint(x: 61, y: 68.39), controlPoint2: CGPoint(x: 68.39, y: 61))
        bezierPath.addLine(to: CGPoint(x: 77.5, y: 61))
        bezierPath.addCurve(to: CGPoint(x: 94, y: 77.5), controlPoint1: CGPoint(x: 86.61, y: 61), controlPoint2: CGPoint(x: 94, y: 68.39))
        bezierPath.addLine(to: CGPoint(x: 94, y: 144.5))
        bezierPath.addCurve(to: CGPoint(x: 77.5, y: 161), controlPoint1: CGPoint(x: 94, y: 153.61), controlPoint2: CGPoint(x: 86.61, y: 161))
        bezierPath.addLine(to: CGPoint(x: 77.5, y: 161))
        bezierPath.addCurve(to: CGPoint(x: 61, y: 144.5), controlPoint1: CGPoint(x: 68.39, y: 161), controlPoint2: CGPoint(x: 61, y: 153.61))
        bezierPath.addLine(to: CGPoint(x: 61, y: 77.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 128, y: 77.5))
        bezier2Path.addCurve(to: CGPoint(x: 144.5, y: 61), controlPoint1: CGPoint(x: 128, y: 68.39), controlPoint2: CGPoint(x: 135.39, y: 61))
        bezier2Path.addLine(to: CGPoint(x: 144.5, y: 61))
        bezier2Path.addCurve(to: CGPoint(x: 161, y: 77.5), controlPoint1: CGPoint(x: 153.61, y: 61), controlPoint2: CGPoint(x: 161, y: 68.39))
        bezier2Path.addLine(to: CGPoint(x: 161, y: 144.5))
        bezier2Path.addCurve(to: CGPoint(x: 144.5, y: 161), controlPoint1: CGPoint(x: 161, y: 153.61), controlPoint2: CGPoint(x: 153.61, y: 161))
        bezier2Path.addLine(to: CGPoint(x: 144.5, y: 161))
        bezier2Path.addCurve(to: CGPoint(x: 128, y: 144.5), controlPoint1: CGPoint(x: 135.39, y: 161), controlPoint2: CGPoint(x: 128, y: 153.61))
        bezier2Path.addLine(to: CGPoint(x: 128, y: 77.5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 111, y: 222))
        bezier3Path.addCurve(to: CGPoint(x: 222, y: 111), controlPoint1: CGPoint(x: 172.3, y: 222), controlPoint2: CGPoint(x: 222, y: 172.3))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 0), controlPoint1: CGPoint(x: 222, y: 49.7), controlPoint2: CGPoint(x: 172.3, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 111), controlPoint1: CGPoint(x: 49.7, y: 0), controlPoint2: CGPoint(x: 0, y: 49.7))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 222), controlPoint1: CGPoint(x: 0, y: 172.3), controlPoint2: CGPoint(x: 49.7, y: 222))
        bezier3Path.close()
        StyleKit.backgroundWhite.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawStopButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 61, y: 61, width: 100, height: 100), cornerRadius: 20)
        StyleKit.recRed.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 111, y: 222))
        bezierPath.addCurve(to: CGPoint(x: 222, y: 111), controlPoint1: CGPoint(x: 172.3, y: 222), controlPoint2: CGPoint(x: 222, y: 172.3))
        bezierPath.addCurve(to: CGPoint(x: 111, y: 0), controlPoint1: CGPoint(x: 222, y: 49.7), controlPoint2: CGPoint(x: 172.3, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 111), controlPoint1: CGPoint(x: 49.7, y: 0), controlPoint2: CGPoint(x: 0, y: 49.7))
        bezierPath.addCurve(to: CGPoint(x: 111, y: 222), controlPoint1: CGPoint(x: 0, y: 172.3), controlPoint2: CGPoint(x: 49.7, y: 222))
        bezierPath.close()
        StyleKit.backgroundWhite.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDeleteButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 149.33, y: 126))
        clipPath.addCurve(to: CGPoint(x: 149.33, y: 149.34), controlPoint1: CGPoint(x: 155.78, y: 132.45), controlPoint2: CGPoint(x: 155.78, y: 142.89))
        clipPath.addLine(to: CGPoint(x: 149.33, y: 149.34))
        clipPath.addCurve(to: CGPoint(x: 126, y: 149.34), controlPoint1: CGPoint(x: 142.89, y: 155.78), controlPoint2: CGPoint(x: 132.44, y: 155.78))
        clipPath.addLine(to: CGPoint(x: 72.66, y: 96))
        clipPath.addCurve(to: CGPoint(x: 72.67, y: 72.67), controlPoint1: CGPoint(x: 66.22, y: 89.56), controlPoint2: CGPoint(x: 66.22, y: 79.12))
        clipPath.addLine(to: CGPoint(x: 72.67, y: 72.67))
        clipPath.addCurve(to: CGPoint(x: 96, y: 72.67), controlPoint1: CGPoint(x: 79.11, y: 66.23), controlPoint2: CGPoint(x: 89.56, y: 66.23))
        clipPath.addLine(to: CGPoint(x: 149.33, y: 126))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 111, y: 111)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -21.5, y: -59.2, width: 43, height: 118.4))
        StyleKit.recRed.setFill()
        rectanglePath.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Group 2
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath()
        clip2Path.move(to: CGPoint(x: 126, y: 72.67))
        clip2Path.addCurve(to: CGPoint(x: 149.33, y: 72.67), controlPoint1: CGPoint(x: 132.44, y: 66.23), controlPoint2: CGPoint(x: 142.89, y: 66.23))
        clip2Path.addLine(to: CGPoint(x: 149.33, y: 72.67))
        clip2Path.addCurve(to: CGPoint(x: 149.33, y: 96), controlPoint1: CGPoint(x: 155.78, y: 79.12), controlPoint2: CGPoint(x: 155.77, y: 89.56))
        clip2Path.addLine(to: CGPoint(x: 96, y: 149.34))
        clip2Path.addCurve(to: CGPoint(x: 72.67, y: 149.34), controlPoint1: CGPoint(x: 89.56, y: 155.78), controlPoint2: CGPoint(x: 79.11, y: 155.78))
        clip2Path.addLine(to: CGPoint(x: 72.67, y: 149.34))
        clip2Path.addCurve(to: CGPoint(x: 72.66, y: 126), controlPoint1: CGPoint(x: 66.22, y: 142.89), controlPoint2: CGPoint(x: 66.22, y: 132.44))
        clip2Path.addLine(to: CGPoint(x: 126, y: 72.67))
        clip2Path.close()
        clip2Path.usesEvenOddFillRule = true
        clip2Path.addClip()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 111, y: 111)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -21.5, y: -59.2, width: 43, height: 118.4))
        StyleKit.recRed.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 111, y: 222))
        bezier3Path.addCurve(to: CGPoint(x: 222, y: 111), controlPoint1: CGPoint(x: 172.3, y: 222), controlPoint2: CGPoint(x: 222, y: 172.3))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 0), controlPoint1: CGPoint(x: 222, y: 49.7), controlPoint2: CGPoint(x: 172.3, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 111), controlPoint1: CGPoint(x: 49.7, y: 0), controlPoint2: CGPoint(x: 0, y: 49.7))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 222), controlPoint1: CGPoint(x: 0, y: 172.3), controlPoint2: CGPoint(x: 49.7, y: 222))
        bezier3Path.close()
        StyleKit.backgroundWhite.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawEvernoteButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 222, height: 222), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 222, height: 222), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 222, y: resizedFrame.height / 222)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.backgroundWhite.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 1, y: 1, width: 220, height: 220))
        StyleKit.borderGray.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 70.93, y: 75.01))
        bezierPath.addLine(to: CGPoint(x: 82.09, y: 75.01))
        bezierPath.addCurve(to: CGPoint(x: 83.24, y: 73.86), controlPoint1: CGPoint(x: 82.72, y: 75.01), controlPoint2: CGPoint(x: 83.24, y: 74.49))
        bezierPath.addCurve(to: CGPoint(x: 83.11, y: 61.64), controlPoint1: CGPoint(x: 83.24, y: 73.85), controlPoint2: CGPoint(x: 83.11, y: 64.3))
        bezierPath.addLine(to: CGPoint(x: 83.11, y: 61.61))
        bezierPath.addCurve(to: CGPoint(x: 84.36, y: 55.93), controlPoint1: CGPoint(x: 83.11, y: 59.43), controlPoint2: CGPoint(x: 83.56, y: 57.52))
        bezierPath.addLine(to: CGPoint(x: 84.74, y: 55.21))
        bezierPath.addCurve(to: CGPoint(x: 84.61, y: 55.28), controlPoint1: CGPoint(x: 84.69, y: 55.22), controlPoint2: CGPoint(x: 84.65, y: 55.25))
        bezierPath.addLine(to: CGPoint(x: 62.95, y: 76.77))
        bezierPath.addCurve(to: CGPoint(x: 62.87, y: 76.89), controlPoint1: CGPoint(x: 62.91, y: 76.8), controlPoint2: CGPoint(x: 62.88, y: 76.84))
        bezierPath.addCurve(to: CGPoint(x: 64.01, y: 76.33), controlPoint1: CGPoint(x: 63.32, y: 76.67), controlPoint2: CGPoint(x: 63.93, y: 76.37))
        bezierPath.addCurve(to: CGPoint(x: 70.93, y: 75.01), controlPoint1: CGPoint(x: 65.9, y: 75.48), controlPoint2: CGPoint(x: 68.19, y: 75.01))
        bezierPath.addLine(to: CGPoint(x: 70.93, y: 75.01))
        bezierPath.close()
        StyleKit.evernoteGreen.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 157.69, y: 72.67))
        bezier2Path.addCurve(to: CGPoint(x: 151.44, y: 64.68), controlPoint1: CGPoint(x: 156.81, y: 67.93), controlPoint2: CGPoint(x: 153.99, y: 65.59))
        bezier2Path.addCurve(to: CGPoint(x: 136.11, y: 61.83), controlPoint1: CGPoint(x: 148.69, y: 63.68), controlPoint2: CGPoint(x: 143.11, y: 62.65))
        bezier2Path.addCurve(to: CGPoint(x: 119.84, y: 61.34), controlPoint1: CGPoint(x: 130.47, y: 61.16), controlPoint2: CGPoint(x: 123.85, y: 61.22))
        bezier2Path.addCurve(to: CGPoint(x: 114.48, y: 54), controlPoint1: CGPoint(x: 119.36, y: 58.05), controlPoint2: CGPoint(x: 117.06, y: 55.04))
        bezier2Path.addCurve(to: CGPoint(x: 94.24, y: 52.67), controlPoint1: CGPoint(x: 107.6, y: 51.24), controlPoint2: CGPoint(x: 96.97, y: 51.91))
        bezier2Path.addCurve(to: CGPoint(x: 88.34, y: 56.43), controlPoint1: CGPoint(x: 92.07, y: 53.28), controlPoint2: CGPoint(x: 89.67, y: 54.52))
        bezier2Path.addCurve(to: CGPoint(x: 86.86, y: 61.64), controlPoint1: CGPoint(x: 87.44, y: 57.71), controlPoint2: CGPoint(x: 86.86, y: 59.35))
        bezier2Path.addCurve(to: CGPoint(x: 86.93, y: 68.69), controlPoint1: CGPoint(x: 86.86, y: 62.93), controlPoint2: CGPoint(x: 86.89, y: 65.98))
        bezier2Path.addCurve(to: CGPoint(x: 87, y: 73.86), controlPoint1: CGPoint(x: 86.96, y: 71.41), controlPoint2: CGPoint(x: 87, y: 73.84))
        bezier2Path.addCurve(to: CGPoint(x: 82.6, y: 78.25), controlPoint1: CGPoint(x: 86.99, y: 76.29), controlPoint2: CGPoint(x: 85.03, y: 78.25))
        bezier2Path.addLine(to: CGPoint(x: 71.45, y: 78.25))
        bezier2Path.addCurve(to: CGPoint(x: 65.86, y: 79.28), controlPoint1: CGPoint(x: 69.07, y: 78.25), controlPoint2: CGPoint(x: 67.25, y: 78.65))
        bezier2Path.addCurve(to: CGPoint(x: 62.74, y: 81.77), controlPoint1: CGPoint(x: 64.47, y: 79.91), controlPoint2: CGPoint(x: 63.49, y: 80.76))
        bezier2Path.addCurve(to: CGPoint(x: 61, y: 88.76), controlPoint1: CGPoint(x: 61.25, y: 83.77), controlPoint2: CGPoint(x: 60.99, y: 86.24))
        bezier2Path.addCurve(to: CGPoint(x: 61.52, y: 94.8), controlPoint1: CGPoint(x: 61, y: 88.76), controlPoint2: CGPoint(x: 61.02, y: 90.81))
        bezier2Path.addCurve(to: CGPoint(x: 68.45, y: 125.95), controlPoint1: CGPoint(x: 61.93, y: 97.88), controlPoint2: CGPoint(x: 65.27, y: 119.41))
        bezier2Path.addCurve(to: CGPoint(x: 72.91, y: 130.69), controlPoint1: CGPoint(x: 69.68, y: 128.5), controlPoint2: CGPoint(x: 70.5, y: 129.56))
        bezier2Path.addCurve(to: CGPoint(x: 96.38, y: 136.29), controlPoint1: CGPoint(x: 78.3, y: 132.99), controlPoint2: CGPoint(x: 90.61, y: 135.56))
        bezier2Path.addCurve(to: CGPoint(x: 107.9, y: 134.06), controlPoint1: CGPoint(x: 102.13, y: 137.03), controlPoint2: CGPoint(x: 105.75, y: 138.58))
        bezier2Path.addCurve(to: CGPoint(x: 108.91, y: 131.31), controlPoint1: CGPoint(x: 107.91, y: 134.05), controlPoint2: CGPoint(x: 108.33, y: 132.94))
        bezier2Path.addCurve(to: CGPoint(x: 111.05, y: 116.98), controlPoint1: CGPoint(x: 110.79, y: 125.64), controlPoint2: CGPoint(x: 111.05, y: 120.62))
        bezier2Path.addCurve(to: CGPoint(x: 111.59, y: 116.98), controlPoint1: CGPoint(x: 111.05, y: 116.61), controlPoint2: CGPoint(x: 111.59, y: 116.59))
        bezier2Path.addCurve(to: CGPoint(x: 117.96, y: 131.07), controlPoint1: CGPoint(x: 111.59, y: 119.55), controlPoint2: CGPoint(x: 111.1, y: 128.64))
        bezier2Path.addCurve(to: CGPoint(x: 132.01, y: 133.56), controlPoint1: CGPoint(x: 120.67, y: 132.03), controlPoint2: CGPoint(x: 126.29, y: 132.89))
        bezier2Path.addCurve(to: CGPoint(x: 140.92, y: 149.44), controlPoint1: CGPoint(x: 137.17, y: 134.16), controlPoint2: CGPoint(x: 140.92, y: 136.19))
        bezier2Path.addCurve(to: CGPoint(x: 130.38, y: 158.6), controlPoint1: CGPoint(x: 140.92, y: 157.5), controlPoint2: CGPoint(x: 139.23, y: 158.6))
        bezier2Path.addCurve(to: CGPoint(x: 120.46, y: 153.09), controlPoint1: CGPoint(x: 123.2, y: 158.6), controlPoint2: CGPoint(x: 120.46, y: 158.79))
        bezier2Path.addCurve(to: CGPoint(x: 128.4, y: 148.97), controlPoint1: CGPoint(x: 120.46, y: 148.48), controlPoint2: CGPoint(x: 125.02, y: 148.97))
        bezier2Path.addCurve(to: CGPoint(x: 128.81, y: 145), controlPoint1: CGPoint(x: 129.91, y: 148.97), controlPoint2: CGPoint(x: 128.81, y: 147.85))
        bezier2Path.addCurve(to: CGPoint(x: 128.91, y: 140.5), controlPoint1: CGPoint(x: 128.81, y: 142.17), controlPoint2: CGPoint(x: 130.58, y: 140.54))
        bezier2Path.addCurve(to: CGPoint(x: 110.36, y: 155.09), controlPoint1: CGPoint(x: 117.23, y: 140.17), controlPoint2: CGPoint(x: 110.36, y: 140.48))
        bezier2Path.addCurve(to: CGPoint(x: 132.01, y: 170.81), controlPoint1: CGPoint(x: 110.36, y: 168.35), controlPoint2: CGPoint(x: 115.43, y: 170.81))
        bezier2Path.addCurve(to: CGPoint(x: 154.95, y: 153.74), controlPoint1: CGPoint(x: 145, y: 170.81), controlPoint2: CGPoint(x: 149.58, y: 170.39))
        bezier2Path.addCurve(to: CGPoint(x: 160.13, y: 123.57), controlPoint1: CGPoint(x: 156.01, y: 150.45), controlPoint2: CGPoint(x: 158.58, y: 140.42))
        bezier2Path.addCurve(to: CGPoint(x: 157.69, y: 72.67), controlPoint1: CGPoint(x: 161.12, y: 112.93), controlPoint2: CGPoint(x: 159.21, y: 80.78))
        bezier2Path.addLine(to: CGPoint(x: 157.69, y: 72.67))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 135.04, y: 108.2))
        bezier2Path.addCurve(to: CGPoint(x: 130.45, y: 108.48), controlPoint1: CGPoint(x: 133.43, y: 108.14), controlPoint2: CGPoint(x: 131.89, y: 108.24))
        bezier2Path.addCurve(to: CGPoint(x: 136.99, y: 101.35), controlPoint1: CGPoint(x: 130.85, y: 105.2), controlPoint2: CGPoint(x: 132.2, y: 101.18))
        bezier2Path.addCurve(to: CGPoint(x: 143.05, y: 109.93), controlPoint1: CGPoint(x: 142.29, y: 101.54), controlPoint2: CGPoint(x: 143.03, y: 106.54))
        bezier2Path.addCurve(to: CGPoint(x: 135.04, y: 108.2), controlPoint1: CGPoint(x: 140.82, y: 108.94), controlPoint2: CGPoint(x: 138.05, y: 108.3))
        bezier2Path.addLine(to: CGPoint(x: 135.04, y: 108.2))
        bezier2Path.close()
        StyleKit.evernoteGreen.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 111, y: 222))
        bezier3Path.addCurve(to: CGPoint(x: 222, y: 111), controlPoint1: CGPoint(x: 172.3, y: 222), controlPoint2: CGPoint(x: 222, y: 172.3))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 0), controlPoint1: CGPoint(x: 222, y: 49.7), controlPoint2: CGPoint(x: 172.3, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 0, y: 111), controlPoint1: CGPoint(x: 49.7, y: 0), controlPoint2: CGPoint(x: 0, y: 49.7))
        bezier3Path.addCurve(to: CGPoint(x: 111, y: 222), controlPoint1: CGPoint(x: 0, y: 172.3), controlPoint2: CGPoint(x: 49.7, y: 222))
        bezier3Path.close()
        StyleKit.backgroundWhite.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfRecButton: UIImage {
        if Cache.imageOfRecButton != nil {
            return Cache.imageOfRecButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawRecButton()

        Cache.imageOfRecButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfRecButton!
    }

    @objc dynamic public class var imageOfSettingsButton: UIImage {
        if Cache.imageOfSettingsButton != nil {
            return Cache.imageOfSettingsButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawSettingsButton()

        Cache.imageOfSettingsButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSettingsButton!
    }

    @objc dynamic public class func imageOfPauseButton(activated: Bool = false) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawPauseButton(activated: activated)

        let imageOfPauseButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfPauseButton
    }

    @objc dynamic public class var imageOfStopButton: UIImage {
        if Cache.imageOfStopButton != nil {
            return Cache.imageOfStopButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawStopButton()

        Cache.imageOfStopButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfStopButton!
    }

    @objc dynamic public class var imageOfDeleteButton: UIImage {
        if Cache.imageOfDeleteButton != nil {
            return Cache.imageOfDeleteButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawDeleteButton()

        Cache.imageOfDeleteButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfDeleteButton!
    }

    @objc dynamic public class var imageOfEvernoteButton: UIImage {
        if Cache.imageOfEvernoteButton != nil {
            return Cache.imageOfEvernoteButton!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 222, height: 222), false, 0)
            StyleKit.drawEvernoteButton()

        Cache.imageOfEvernoteButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfEvernoteButton!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var recButtonTargets: [AnyObject]! {
        get { return Cache.recButtonTargets }
        set {
            Cache.recButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfRecButton)
            }
        }
    }

    @objc @IBOutlet dynamic var settingsButtonTargets: [AnyObject]! {
        get { return Cache.settingsButtonTargets }
        set {
            Cache.settingsButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfSettingsButton)
            }
        }
    }

    @objc @IBOutlet dynamic var stopButtonTargets: [AnyObject]! {
        get { return Cache.stopButtonTargets }
        set {
            Cache.stopButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfStopButton)
            }
        }
    }

    @objc @IBOutlet dynamic var deleteButtonTargets: [AnyObject]! {
        get { return Cache.deleteButtonTargets }
        set {
            Cache.deleteButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfDeleteButton)
            }
        }
    }

    @objc @IBOutlet dynamic var evernoteButtonTargets: [AnyObject]! {
        get { return Cache.evernoteButtonTargets }
        set {
            Cache.evernoteButtonTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StyleKit.imageOfEvernoteButton)
            }
        }
    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
